package away3dlite.primitives;import away3dlite.materials.BitmapMaterial;import away3dlite.core.base.Object3D;import away3dlite.materials.Material;//use namespace arcane;using away3dlite.namespace.Arcane;using away3dlite.haxeutils.HaxeUtils;/*** Creates a 3d Skybox primitive.*/ class Skybox6 extends AbstractPrimitive{		private var _size:Float;	private var _segments:Int;	private var _pixelBorder:Int;		/**	 * @inheritDoc	 */	private override function buildPrimitive():Void	{		super.buildPrimitive();				var i:Int;		var j:Int;				var udelta:Float = _pixelBorder/600;		var vdelta:Float = _pixelBorder/400;		if (Std.is(material, BitmapMaterial)) {			var bMaterial:BitmapMaterial = material.downcast(BitmapMaterial);			udelta = _pixelBorder/bMaterial.width;			vdelta = _pixelBorder/bMaterial.height;		}					i = -1;		while (++i <= _segments)		{			j = -1;			while (++i <= _segments)			{								//create front/back				_vertices.xyzpush(_size/2 - i*_size/_segments, _size/2 - j*_size/_segments, _size/2);				_vertices.xyzpush(_size/2 - i*_size/_segments, _size/2 - j*_size/_segments, -_size/2);								_uvtData.xyzpush(1/3 - udelta - i*(1 - 6*udelta)/(3*_segments), 1 - vdelta - j*(1 - 4*vdelta)/(2*_segments), 1);				_uvtData.xyzpush(1/3 + udelta + i*(1 - 6*udelta)/(3*_segments), 1/2 - vdelta - j*(1 - 4*vdelta)/(2*_segments), 1);								//create top/bottom				_vertices.xyzpush(_size/2 - i*_size/_segments, _size/2, _size/2 - j*_size/_segments);				_vertices.xyzpush(_size/2 - i*_size/_segments, -_size/2, _size/2 - j*_size/_segments);								_uvtData.xyzpush(2/3 + udelta + j*(1 - 6*udelta)/(3*_segments), 1/2 + vdelta + i*(1 - 4*vdelta)/(2*_segments), 1);				_uvtData.xyzpush(1/3 + udelta + j*(1 - 6*udelta)/(3*_segments), 1 - vdelta - i*(1 - 4*vdelta)/(2*_segments), 1);								//create left/right				_vertices.xyzpush(_size/2, _size/2 - i*_size/_segments, _size/2 - j*_size/_segments);				_vertices.xyzpush(-_size/2, _size/2 - i*_size/_segments, _size/2 - j*_size/_segments);								_uvtData.xyzpush(udelta + j*(1 - 6*udelta)/(3*_segments), 1/2 - vdelta - i*(1 - 4*vdelta)/(2*_segments), 1);				_uvtData.xyzpush(1 - udelta - j*(1 - 6*udelta)/(3*_segments), 1/2 - vdelta - i*(1 - 4*vdelta)/(2*_segments), 1);			}		}				i = 0;		while (++i <= _segments)		{			j = 0;			while (++j <= _segments)			{				var a:Int = 6*((_segments + 1)*j + i);				var b:Int = 6*((_segments + 1)*j + i - 1);				var c:Int = 6*((_segments + 1)*(j - 1) + i - 1);				var d:Int = 6*((_segments + 1)*(j - 1) + i);								_indices.xyzpush(c,d,b);				_indices.xyzpush(d,a,b);				_indices.xyzpush(c+1,b+1,d+1);				_indices.xyzpush(d+1,b+1,a+1);								_indices.xyzpush(c+2,b+2,d+2);				_indices.xyzpush(b+2,a+2,d+2);				_indices.xyzpush(c+3,d+3,b+3);				_indices.xyzpush(b+3,d+3,a+3);								_indices.xyzpush(c+4,d+4,b+4);				_indices.xyzpush(d+4,a+4,b+4);				_indices.xyzpush(c+5,b+5,d+5);				_indices.xyzpush(d+5,b+5,a+5);							}		}	}		/**	 * Defines the dimensions of the skybox. Defaults to 40000.	 */	public var size(get_size, set_size):Float;	private inline function get_size():Float	{		return _size;	}		private function set_size(val:Float):Float	{		if (_size == val)			return val;				_size = val;		_primitiveDirty = true;		return val;	}		/**	 * Defines the number of segments that make up each face of the skybox. Defaults to 4.	 */	public var segments(get_segments, set_segments):Int;	private inline function get_segments():Int	{		return _segments;	}		private function set_segments(val:Int):Int	{		if (_segments == val)			return val;				_segments = val;		_primitiveDirty = true;		return val;	}		/**	 * Defines the texture mapping border in pixels used around each face of the skybox. Defaults to 1	 */	public var pixelBorder(get_pixelBorder, set_pixelBorder):Int;	private inline function get_pixelBorder():Int	{		return _pixelBorder;	}		private function set_pixelBorder(val:Int):Int	{		if (_pixelBorder == val)			return val;				_pixelBorder = val;		_primitiveDirty = true;		return val;	}		/**	 * Creates a new <code>Skybox6</code> object.	 * 	 * @param	material	Defines the global material used on the faces in the skybox.	 * @param	size		Defines the size of the skybox.	 * @param	segments	Defines the number of segments that make up each face of the skybox.	 * @param	pixelBorder	Defines the texture mapping border in pixels used around each face of the skybox.	 */	public function new(?material:Material, ?size:Float = 40000, ?segments:Int = 4, ?pixelBorder:Int = 1)	{		super(material);				_size = size;		_segments = segments;		_pixelBorder = pixelBorder;				type = "Skybox";		url = "primitive";	}				/**	 * Duplicates the skybox6 properties to another <code>Skybox6</code> object.	 * 	 * @param	object	[optional]	The new object instance into which all properties are copied. The default is <code>Skybox6</code>.	 * @return						The new object instance with duplicated properties applied.	 */	public override function clone(?object:Object3D):Object3D	{		var skybox6:Skybox6 = (object != null) ? object.downcast(Skybox6) : new Skybox6();		super.clone(skybox6);		skybox6.size = _size;		skybox6.segments = _segments;		skybox6.pixelBorder = _pixelBorder;		skybox6._primitiveDirty = false;				return skybox6;	}} 