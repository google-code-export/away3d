package away3dlite.loaders.utils;import away3dlite.core.utils.Debug;import away3dlite.haxeutils.FastStd;import away3dlite.loaders.data.MaterialData;import away3dlite.materials.BitmapMaterial;import away3dlite.materials.WireframeMaterial;import flash.display.BitmapData;/*** Store for all materials associated with an externally loaded file.*/class MaterialLibrary /*extends Dictionary*/ extends Hash<MaterialData>{	private var length:Int;		/**	 * The root directory path to the texture files.	 */	public var texturePath:String;		/**	 * Flag to determine if any of the contained textures require a file load.	 */	public var loadRequired:Bool;		/**	 * Adds a material name reference to the library.	 */	public function new()	{		super();		length = 0;	}		public function addMaterial(name:String):MaterialData	{		//return if material already exists		if (this.exists(name))			return get(name);				length++;		var materialData:MaterialData = new MaterialData();		this.set(materialData.name = name, materialData);		return materialData;	}		/**	 * Returns a material data object for the given name reference in the library.	 */	public function getMaterial(name:String):MaterialData	{		var ret = get(name);		if (ret == null)			Debug.warning("Material '" + name + "' does not exist");		return ret;	}			/**	 * Called after all textures have been loaded from the <code>TextureLoader</code> class.	 * 	 * @see away3dlite.loaders.utils.TextureLoader	 */	public function texturesLoaded(#if flash9 loadQueue:TextureLoadQueue #else loadQueue:Dynamic #end ):Void //TODO: hack to control what is imported	{		#if flash9		loadRequired = false;				var images:Array<TextureLoader> = loadQueue.images;		var _materialData:MaterialData;		var _image:TextureLoader;		for (_materialData in this)		{			for (_image in images)			{				if (texturePath + _materialData.textureFileName == _image.filename)				{					try{						_materialData.textureBitmap = new BitmapData(Std.int(_image.width), Std.int(_image.height), true, 0x00FFFFFF);						_materialData.textureBitmap.draw(_image);						_materialData.material = new BitmapMaterial(_materialData.textureBitmap);					}catch(e:Dynamic){						Debug.warning("File not found : " + texturePath + _materialData.textureFileName );						_materialData.material = new WireframeMaterial();					}				}			}		}				#end	}}