package {		[SWF(width="1168", height="700", frameRate="60")]		import away3d.entities.*;	import away3d.containers.*;	import away3d.cameras.lenses.PerspectiveLens;	import away3d.cameras.Camera3D;	import away3d.materials.BitmapMaterial;	import away3d.debug.AwayStats;	import away3d.extrusions.LatheExtrude;	import away3d.lights.PointLight;	import away3d.materials.utils.MultipleMaterials;	 	import flash.display.*;	import flash.geom.Vector3D;	import flash.events.*;	 	public class LatheExtrudeTest extends MovieClip	{ 		[Embed(source="assets/models/images/front.jpg")]		private var Front : Class;				[Embed(source="assets/models/images/back.jpg")]		private var Back : Class;				[Embed(source="assets/models/images/top.jpg")]		private var Top : Class;				[Embed(source="assets/models/images/bottom.jpg")]		private var Bottom : Class;				[Embed(source="assets/models/images/left.jpg")]		private var Left : Class;				[Embed(source="assets/models/images/right.jpg")]		private var Right : Class;		 		private var _lathesContainer:ObjectContainer3D;		private var _view : View3D;		private var camera:Camera3D;		private var origin:Vector3D = new Vector3D(0,0,0);		private var wave:Number = 0;		private var _light1:PointLight;		private var _light2:PointLight;		 		public function LatheExtrudeTest():void		{			addEventListener(Event.ADDED_TO_STAGE, init);		}		 		private function init(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			initView();			addLights();			populate();			 			this.addEventListener(Event.ENTER_FRAME, handleEnterFrame);		}				private function addLights():void		{			_light1 = new PointLight();			_light1.x = -4000;			_light1.y = 4000;			_light1.z = -4000;			_light1.radius = 3000;			_light1.fallOff = 15000;			_light1.color = 0x66FFFFF; 			_view.scene.addChild(_light1);						_light2 = new PointLight();			_light2.x = 4000;			_light2.y = -4000;			_light2.z = 4000;			_light2.radius = 3000;			_light2.fallOff = 15000;			_light2.color = 0xFFFFFFF; 			_view.scene.addChild(_light2);		}				private function initView():void		{			_view = new View3D();			_view.antiAlias = 4;			_view.backgroundColor = 0x333333;			camera = _view.camera;			camera.lens = new PerspectiveLens();			camera.x = 500;			camera.y = 120;			camera.z = 500;			addChild(_view);			addChild(new AwayStats(_view));			 			camera.lens.near = 10;			camera.lens.far = 3000;		}				private function populate() : void		{			_lathesContainer = new ObjectContainer3D();						var frontmat:BitmapMaterial = new BitmapMaterial(new Front().bitmapData);			frontmat.lights = [_light1, _light2];			 			// a simple ring			var profileRing:Vector.<Vector3D> = new Vector.<Vector3D>();			profileRing[0] = new Vector3D(-100, 100, 0);			profileRing[1] = new Vector3D(-100, 0, 0);			var mySimpleRing:LatheExtrude = new LatheExtrude(null, profileRing, LatheExtrude.Y_AXIS, 1, 50, true, true, true);			mySimpleRing.x = 230;			mySimpleRing.z = mySimpleRing.y = 0;			_lathesContainer.addChild(mySimpleRing);						// the same ring with thickness, material mapping is this time set per segment			var mySimpleRingWithThickness:LatheExtrude = new LatheExtrude(frontmat, profileRing, LatheExtrude.Y_AXIS, 1, 50, false, true, false, 40);			mySimpleRingWithThickness.x = 230;			mySimpleRingWithThickness.z = 0;			mySimpleRingWithThickness.y = 200;			_lathesContainer.addChild(mySimpleRingWithThickness);						// Using multiple materials			var multy:MultipleMaterials = new MultipleMaterials();			multy.front = frontmat;			multy.back = new BitmapMaterial(new Back().bitmapData);			multy.back.lights = [_light1, _light2];			multy.left = new BitmapMaterial(new Right().bitmapData);			multy.left.lights = [_light1, _light2];			multy.right = new BitmapMaterial(new Left().bitmapData);			multy.right.lights = [_light1, _light2];			multy.top = new BitmapMaterial(new Top().bitmapData);			multy.top.lights = [_light1, _light2];			multy.bottom = new BitmapMaterial(new Bottom().bitmapData);			multy.bottom.lights = [_light1, _light2];						// the same ring, this time half size with less definition, thickness and multiple materials			var myHalfRingWithThickness:LatheExtrude = new LatheExtrude(null, profileRing, LatheExtrude.Y_AXIS, .5, 8, true, true, false, 40, true, 0, multy);			myHalfRingWithThickness.x = 230;			myHalfRingWithThickness.z = 0;			myHalfRingWithThickness.y = -200;			_lathesContainer.addChild(myHalfRingWithThickness);						//a vase			var profileVase:Vector.<Vector3D> = new Vector.<Vector3D>();			profileVase[0] = new Vector3D(0, 50, 0);			profileVase[1] = new Vector3D(-100, 0, 0);			profileVase[2] = new Vector3D(-100, 50, 0);			profileVase[3] = new Vector3D(-50, 90, 0);			profileVase[4] = new Vector3D(-120, 130, 0);			profileVase[5] = new Vector3D(-140, 150, 0);			profileVase[6] = new Vector3D(-180, 250, 0);			profileVase[7] = new Vector3D(-170, 400, 0);						// as we do not care about about precise the thickness must be, param precise is set to false			var myVase:LatheExtrude = new LatheExtrude(frontmat, profileVase, LatheExtrude.Y_AXIS, 1, 40, true, true, true, 20, false, 0, multy);			myVase.x = -500;			myVase.z = myVase.y = 0;			_lathesContainer.addChild(myVase);						//a pie, a single line and thickness do the trick 			var profilep:Vector.<Vector3D> = new Vector.<Vector3D>();			profilep[0] = new Vector3D(0, 0, 0);			profilep[1] = new Vector3D(200, 0, 0);			 			// The main pie			// if you want to save data by not building unseen sides, pass the ignoreSide param			// depending on profile definition and rotation axis, the terms used to id the sides my not fit our perception.			// Like in this case, the bottom is actually the front side into the class realm			var myPie:LatheExtrude = new LatheExtrude(null, profilep, LatheExtrude.Y_AXIS, .8, 40, true, true, true, 100, true, 0, multy, "front");			myPie.x = -100;			myPie.z = -100;			myPie.y = 0;			myPie.rotationY = -170;			_lathesContainer.addChild(myPie);						var myPieceOfPie:LatheExtrude = new LatheExtrude(null, profilep, LatheExtrude.Y_AXIS, .2, 40, true, true, true, 100, true);			// all variables in constructor can also be via setters, here the materials			myPieceOfPie.materials = multy;			myPieceOfPie.x = 60;			myPieceOfPie.z = -280;			myPieceOfPie.y = 0;			myPieceOfPie.rotationY = 270;			_lathesContainer.addChild(myPieceOfPie);						//making a spring			var profile:Vector.<Vector3D> = new Vector.<Vector3D>();			// here a simple square like shape on x axis			profile[0] = new Vector3D(90, 0, 0);			profile[1] = new Vector3D(100, 15, 0);			profile[2] = new Vector3D(90, 30, 0);			profile[3] = new Vector3D(80, 15, 0);			profile[4] = new Vector3D(90, 0, 0);						var tweek:Object = {};			tweek.x = 0;			tweek.y = 1.1;			tweek.z = 0;			tweek.radius = 0;			tweek.rotation = 0;						var mySpring:LatheExtrude = new LatheExtrude(frontmat, profile, LatheExtrude.Y_AXIS, 3, 50, true, true, true, 0, true, 0, null, "", tweek);			mySpring.x = 500;			mySpring.z = mySpring.y = 0;			_lathesContainer.addChild(mySpring);						_view.scene.addChild(_lathesContainer);		}				private function handleEnterFrame(e : Event) : void		{			_view.camera.position = origin;			_view.camera.rotationY += .5;			_view.camera.moveBackward(1000);						wave+= .01;			_view.camera.y = 500*Math.sin(wave);			camera.lookAt(_lathesContainer.position);						_view.render();		}		 	}}