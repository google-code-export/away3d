package {	[SWF(width="1168", height="630", frameRate="60")]			import away3d.containers.View3D;	import away3d.cameras.lenses.PerspectiveLens;	import away3d.cameras.Camera3D;	import away3d.materials.BitmapMaterial;	import away3d.primitives.Plane;	import away3d.primitives.Sphere;	import away3d.loading.parsers.data.DefaultBitmapData;	import away3d.containers.ObjectContainer3D;	import away3d.tools.utils.Drag3D;	import away3d.tools.MeshHelper;    import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.geom.Vector3D;	import flash.events.Event;	 	public class DragTest extends Sprite	{		private var _view : View3D;		private var _sphere : Sphere;		private var _drag3D:Drag3D;		 		public function DragTest()		{			_view = new View3D();			_view.antiAlias = 2;			_view.backgroundColor = 0xCCCCCC;			var camera:Camera3D = _view.camera;			camera.lens = new PerspectiveLens();			var eps:Number = 0.00000001;			camera.x = eps;			camera.y = eps;			camera.z = eps;			addChild(_view);						populate();						initDrag();		}		 		private function populate() : void		{			var pmaterial:BitmapMaterial = new BitmapMaterial(DefaultBitmapData.bitmapData);						var plane:Plane = new Plane(pmaterial);			plane.segmentsH = 10;			plane.segmentsW = 10;			plane.width = 2000;			plane.height = 2000;			plane.yUp = false;			 _view.scene.addChild(plane);						var map:BitmapData = new BitmapData(256,256,true, 0x80FF0000);			var smaterial:BitmapMaterial = new BitmapMaterial(map);			_sphere = new Sphere(smaterial);			_sphere.segmentsH = 10;			_sphere.segmentsW = 10;			_sphere.radius = 250;			_sphere.y = 125;			 _view.scene.addChild(_sphere);			 			var radiusObject:Number = MeshHelper.boundingRadius(plane);			_view.camera.lookAt(plane.position);			_view.camera.moveBackward(radiusObject*5);			_view.camera.lens.near = 10;			 _view.camera.lens.far = 60000;			 this.addEventListener(Event.ENTER_FRAME, handleEnterFrame);		}		 		private function initDrag() : void		{			_drag3D = new Drag3D(_view, ObjectContainer3D(_sphere)); //third param optional default plane = xz plane			//_drag3D.offsetCenter = true;// offsets mouse if true or drag sticks to object center		}		 		private function handleEnterFrame(e:Event) : void		{			//updating the dragged object on screen			_drag3D.updateDrag();			_view.render();		}	}}