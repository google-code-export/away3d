package away3d.geom{		import away3d.core.base.Mesh;	import away3d.core.base.Vertex;	import away3d.core.base.Face;	import away3d.core.base.Object3D;	import away3d.containers.ObjectContainer3D;	import away3d.arcane;		use namespace arcane;	  		/**	 * Class Weld removes from the faces found of an object3d all the duplicated vertexes<Weld></code>	 */	public class Weld{		private var av:Array = [];		 		private function parse(object3d:Object3D):void		{			 			if(object3d is ObjectContainer3D){							var obj:ObjectContainer3D = (object3d as ObjectContainer3D);							for(var i:int =0;i<obj.children.length;++i){										if(obj.children[i] is ObjectContainer3D){						parse(obj.children[i]);					} else if(obj.children[i] is Mesh){						weld( obj.children[i]);					}				}							}else if(object3d is Mesh){				weld( object3d as Mesh);			}			 		}				private function createVertex(v:Vertex):Boolean		{			for(var i:int=0;i<av.length;++i){					if(v.x == av[i].x && v.y == av[i].y && v.z == av[i].z ){						return false;					}			}			av.push(v);			return true;		}				private function weld(obj:Mesh):void		{				var face:Face;				var v: Vertex;				var i:int = 0;				var y:int = 0;				var loop:int = obj.faces.length;								for(i=0;i<obj.vertices.length;++i){										if(createVertex(obj.vertices[i])){						v = av[av.length-1];												for(y=0;y<loop;++y){							face = obj.faces[y];														if(face.v0.x == v.x && face.v0.y == v.y && face.v0.z == v.z )								face.v0 = v;							 							if(face.v1.x == v.x && face.v1.y == v.y && face.v1.z == v.z )								face.v1 = v;														if(face.v2.x == v.x && face.v2.y == v.y && face.v2.z == v.z )								face.v2 = v;						}					}				}				obj.vertices = [];				obj.vertices = av;				 		}		 		/**		*  Class Weld removes from the faces found of an object3d all the duplicated vertexes		* 		* @param	 object3d		Object3D. The target Object3d object.		*/		 		function Weld(object3d:Object3D):void		{			parse(object3d);		}					}}