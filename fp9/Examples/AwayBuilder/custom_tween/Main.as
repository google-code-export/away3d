package{	import away3d.cameras.Camera3D;		import awaybuilder.WorldBuilder;	import awaybuilder.camera.AnimationControl;	import awaybuilder.collada.ColladaLoader;	import awaybuilder.events.GeometryEvent;	import awaybuilder.vo.SceneCameraVO;	import awaybuilder.vo.SceneGeometryVO;		import gs.TweenLite;	import gs.easing.Cubic;		import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.net.URLRequest;				public class Main extends Sprite	{		protected var world : WorldBuilder ;		protected var camera : Camera3D ;						public function Main ( )		{			var loader : ColladaLoader = new ColladaLoader ( ) ;						this.stage.align = StageAlign.TOP_LEFT ;			this.stage.scaleMode = StageScaleMode.NO_SCALE ;			loader.addEventListener ( Event.COMPLETE , this.loadComplete ) ;			loader.load ( new URLRequest ( "maya/world.dae" ) ) ;		}								protected function loadComplete ( event : Event ) : void		{			var loader : ColladaLoader = event.target as ColladaLoader ;						this.world = new WorldBuilder ( ) ;			this.world.data = loader.collada ;			this.world.startCamera = "overviewCam" ;			this.world.animationControl = AnimationControl.EXTERNAL ;			this.world.addEventListener ( Event.COMPLETE , this.worldComplete ) ;			this.world.addEventListener ( GeometryEvent.UP , this.geometryClick ) ;			this.addChild ( this.world ) ;			this.world.x = this.stage.stageWidth * 0.5 ;			this.world.y = this.stage.stageHeight * 0.5 ;			this.world.build ( ) ;		}								protected function worldComplete ( event : Event ) : void		{			this.camera = this.world.worldView.camera ;			this.stage.addEventListener ( Event.RESIZE , this.resize ) ;			this.resize ( ) ;		}						protected function geometryClick ( event : GeometryEvent ) : void		{			var camera : Camera3D = this.world.worldView.camera ;			var geometry : SceneGeometryVO = event.data as SceneGeometryVO ;			var target : SceneCameraVO = this.world.getCameraById ( geometry.targetCamera ) ;			var init : Object = { } ;						init[ "x" ] = target.camera.x ;			init[ "y" ] = target.camera.y ;			init[ "z" ] = target.camera.z ;			init[ "rotationX" ] = target.camera.rotationX ;			init[ "rotationY" ] = target.camera.rotationY ;			init[ "rotationZ" ] = target.camera.rotationZ ;			init[ "ease" ] = Cubic.easeInOut ;			init[ "onComplete"] = this.animationComplete ;						TweenLite.to ( camera , 2 , init ) ;		}								protected function animationComplete ( ) : void		{			trace ( "camera animation complete" ) ;		}								protected function resize ( event : Event = null ) : void		{			this.world.x = this.stage.stageWidth * 0.5 ;			this.world.y = this.stage.stageHeight * 0.5 ;		}	}}