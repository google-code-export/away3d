package{	import away3d.cameras.Camera3D;		import awaybuilder.WorldBuilder;	import awaybuilder.camera.AnimationControl;	import awaybuilder.collada.ColladaLoader;	import awaybuilder.events.GeometryEvent;	import awaybuilder.vo.SceneCameraVO;	import awaybuilder.vo.SceneGeometryVO;		import gs.TweenLite;	import gs.easing.Cubic;		import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.net.URLRequest;				public class Main extends Sprite	{		protected var _camera : Camera3D;		protected var _world : WorldBuilder;						public function Main ( )		{			var loader : ColladaLoader = new ColladaLoader ( );						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			loader.addEventListener ( Event.COMPLETE , onColladaComplete );			loader.load ( new URLRequest ( "maya/world.dae" ) );		}								protected function onColladaComplete ( event : Event ) : void		{			var loader : ColladaLoader = event.target as ColladaLoader;						_world = new WorldBuilder ( );			_world.data = loader.collada;			_world.startCamera = "overviewCam";			_world.animationControl = AnimationControl.EXTERNAL;			_world.addEventListener ( Event.COMPLETE , onWorldComplete );			_world.addEventListener ( GeometryEvent.UP , onGeometryClick );			addChild ( _world );			_world.x = stage.stageWidth * 0.5;			_world.y = stage.stageHeight * 0.5;			_world.build ( );		}								protected function onWorldComplete ( event : Event ) : void		{			_camera = _world.worldView.camera;			stage.addEventListener ( Event.RESIZE , resize );			resize ( );		}						protected function onGeometryClick ( event : GeometryEvent ) : void		{			var camera : Camera3D = _world.worldView.camera;			var geometry : SceneGeometryVO = event.data as SceneGeometryVO;			var target : SceneCameraVO = _world.getCameraById ( geometry.targetCamera );			var init : Object = { };						init[ "x" ] = target.camera.x;			init[ "y" ] = target.camera.y;			init[ "z" ] = target.camera.z;			init[ "rotationX" ] = target.camera.rotationX;			init[ "rotationY" ] = target.camera.rotationY;			init[ "rotationZ" ] = target.camera.rotationZ;			init[ "ease" ] = Cubic.easeInOut;			init[ "onComplete"] = onAnimationComplete;						TweenLite.to ( camera , 2 , init );		}								protected function onAnimationComplete ( ) : void		{			trace ( "camera animation complete" );		}								protected function resize ( event : Event = null ) : void		{			_world.x = stage.stageWidth * 0.5;			_world.y = stage.stageHeight * 0.5;		}	}}